---
title: "Adding Features (Augmenting)"
jupyter: python3
toc: true
toc-depth: 3
number-sections: true
number-depth: 2
code-fold: show
code-tools:
    source: false
    toggle: true
---


This section will cover the `augment` set of functions, use to add many additional time series features to a dataset. We'll cover how to use the following set of functions

* `augment_lags()`
* `augment_leads()`
* `augment_rolling()`
* `augment_time_series_signature()`
* `augment_holiday_signature()`
* `augment_fourier()`

# Augment Lags / Leads
**Lags** are commonly used in time series forecasting to incorportate the past values of a feature as predictors. **Leads**, while not as common as Lags in time series might be useful in scenarios where you want to predict a future value based on other future values.

::: {.callout-tip collapse="false"}
## Help Doc Info: `augment_lag()`, `augment_leads()`

Use `help(tk.augment_lags)` and `help(tk.augment_leads)` to review additional helpful documentation.

:::

## Basic Examples

Add 1 or more lags / leads to a dataset:

```{python}

# import libraries
import pytimetk as tk
import pandas as pd
import numpy as np
import random

# create sample data
dates = pd.date_range(start = '2023-09-18', end = '2023-09-24')
values = [random.randint(10, 50) for _ in range(7)]

df = pd.DataFrame({
    'date': dates,
    'value': values
})

df
```

Create lag / lead of 3 days:

:::{.panel-tabset groups="augment-leads-lags"}
## Lag
```{python}
# augment lag
df \
    .augment_lags(
		date_column  = 'date',
		value_column = 'value',
		lags         = 3
	)
```

## Lead
```{python}
# augment leads
df \
    .augment_leads(
		date_column  = 'date',
		value_column = 'value',
		leads        = 3
	)
```

:::

We can create multiple lag / lead values for a single time series:

:::{.panel-tabset groups="augment-leads-lags-multiple"}
## Lag
```{python}
# multiple lagged values for a single time series
df \
	.augment_lags(
		date_column  = 'date',
		value_column = 'value',
		lags         = (1, 3)
	)
```

## Lead
```{python}

# multiple leads values for a single time series
df \
	.augment_leads(
		date_column  = 'date',
		value_column = 'value',
		leads        = (1, 3)
	)

```

:::


## Augment Lags / Leads For Grouped Time Series

`augment_lags()` and `augment_leads()` also works for grouped time series data. Lets use the `m4_daily_df` dataset to showcase examples:

```{python}
# load m4_daily_df
m4_daily_df = tk.load_dataset('m4_daily', parse_dates = ['date'])
```

:::{.panel-tabset groups="augment-leads-lags-group"}
## Lag
```{python}
# agument lags for grouped time series
m4_daily_df \
	.groupby("id") \
    .augment_lags(
		date_column  = 'date',
		value_column = 'value',
		lags         = (1, 7)
	)
```

## Lead
```{python}

# augment leads for grouped time series
m4_daily_df \
	.groupby("id") \
    .augment_leads(
		date_column  = 'date',
		value_column = 'value',
		leads        = (1, 7)
	)
```

:::


# Augment Rolling

A **Rolling Window** refers to a specific-sized subset of time series data that moves sequentially over the dataset.

Rolling windows play a crucial role in time series forecasting due to their ability to smooth out data, highlight seasonality, and detect anomalies.

`augment_rolling()` applies multiple rolling window functions with varying window sizes to time series data.

::: {.callout-tip collapse="false"}
## Help Doc Info: `augment_rolling()`

Use `help(tk.augment_rolling)` to review additional helpful documentation.

:::


## Basic Examples

We'll continue with the use of our sample `df` created earlier:
```{python}
# window = 3 days, window function = mean
df \
	.augment_rolling(
		date_column  = 'date',
		value_column = 'value',
		window       = 3,
		window_func  = 'mean'
	)
```

It is important to understand how the `center` parameter in `augment_rolling()` works.

::: {.callout-important collapse="false"}
## `center`

When set to `True` (default) the value of the rolling window will be **centered**, meaning that the value at the center of the window will be used as the result.
When set to `False` (default) the rolling window will **not be centered**, meaning that the value at the end of the window will be used as the result.

:::

Lets see an example:

:::{.panel-tabset groups="augment-rolling"}

## Augment Rolling: Center = True
```{python}
# agument rolling: center = true
df \
	.augment_rolling(
		date_column  = 'date',
		value_column = 'value',
		window       = 3,
		window_func  = 'mean',
		center       = True
	)
```

Note that we are using a 3 day rolling window and applying a `mean` to `value`. In simplier terms, `value_rolling_mean_win_3` is a 3 day rolling average of `value` with `center` set to `True`. Thus the function starts computing the `mean` from `2023-09-19`

## Augment Rolling: Center = False
```{python}

# agument rolling: center = false
df \
	.augment_rolling(
		date_column  = 'date',
		value_column = 'value',
		window       = 3,
		window_func  = 'mean',
		center       = False
	)
```

Note that we are using a 3 day rolling window and applying a `mean` to `value`. In simplier terms, `value_rolling_mean_win_3` is a 3 day rolling average of `value` with `center` set to `False`. Thus the function starts computing the `mean` from `2023-09-20`. The same `value` for `2023-19-18` and `2023-09-19` are returned as `value_rolling_mean_win_3` since it did not detected the third to apply the 3 day rolling average.

:::


## Augment Rolling with Multiple Windows and Window Functions

Multiple window functions can be passed to the `window` and `window_func` parameters:

```{python}

# augment rolling: window of 2 & 7 days, window_func of mean and standard deviation
m4_daily_df \
	.query('id == "D10"') \
    .augment_rolling(
                date_column = 'date',
                value_column = 'value',
                window = [2,7],
                window_func = ['mean', ('std', lambda x: x.std())]
            )


```

## Augment Rolling with Grouped Time Series

`agument_rolling` can be used on grouped time series data:

```{python}
## augment rolling on grouped time series: window of 2 & 7 days, window_func of mean and standard deviation
m4_daily_df \
	.groupby('id') \
    .augment_rolling(
                date_column = 'date',
                value_column = 'value',
                window = [2,7],
                window_func = ['mean', ('std', lambda x: x.std())]
            )

```


# Augment Time Series Signature

`augment_timeseries_signature()` is designed to assist in generating additional features
from a given date column.

::: {.callout-tip collapse="false"}
## Help Doc Info: `augment_timeseries_signature()`

Use `help(tk.augment_timeseries_signature)` to review additional helpful documentation.

:::

## Basic Example

We'll showcase an example using the `m4_daily_df` dataset by generating 29 additional features from the `date` column:

```{python}
# augment time series signature
m4_daily_df \
    .query('id == "D10"') \
	.augment_timeseries_signature(
		date_column = 'date'
	) \
    .head()

```


# Augment Holiday Signature

`augment_holiday_signature()` is used to flag holidays from a date column based on date and country.

::: {.callout-tip collapse="false"}
## Help Doc Info: `augment_holiday_signature()`

Use `help(tk.augment_holiday_signature)` to review additional helpful documentation.

:::

## Basic Example

We'll showcase an example using some sample data:

```{python}
# create sample data
dates = pd.date_range(start = '2022-12-25', end = '2023-01-05')

df = pd.DataFrame({'date': dates})

# augment time series signature: USA
df \
    .augment_holiday_signature(
		date_column  = 'date',
		country_name = 'UnitedStates'
	)

```


# Augment Fourier

`augment_fourier()` is used to add mutiple fourier series to time series data. Fourier transformation is often used as a feature engineering technique in time series forecasting as it helps detect hidden periodicities and cyclic patterns in the data. Capturing these hidden cyclic patterns can help improve predictive performance.

::: {.callout-tip collapse="false"}
## Help Doc Info: `augment_fourier()`

Use `help(tk.augment_fourier)` to review additional helpful documentation.

:::

## Basic Example


```{python}

# augment fourier with 7 periods and max order of 1
#m4_daily_df \
#    .query('id == "D10"') \
#    .augment_fourier(
#		date_column  = 'date',
#		value_column = 'value',
#		num_periods  = 7,
#		max_order    = 1
#    ) \
#	.head(20)

```

Notice the additional `value_fourier_1_1` to `value_fourier_1_7` colums that have been added to the data.


## Augment Fourier with Grouped Time Series

`augment_fourier` also works with grouped time series:

```{python}
# augment fourier with grouped time series
m4_daily_df \
    .groupby('id') \
    .augment_fourier(
		date_column  = 'date',
		value_column = 'value',
		num_periods  = 7,
		max_order    = 1
    ) \
	.head(20)

```

<!--

## Visualizing Fourier Series

We can use the `plot_timesries()` function to visualize a fourier series:

::: {.callout-tip collapse="false"}
## Help Doc Info: `plot_timeseries()`

Use `plot_timeseries()` to visualize fourier transformations.

:::

### Visualize Single Fourier Series

```{python}

# augment fourier
fourier_df = m4_daily_df \
    .query('id == "D10"')\
    .augment_fourier(
		date_column  = 'date',
		value_column = 'value',
		num_periods  = 7,
		max_order    = 1
    ) \
	.tail(100)

# plot time series (plotnine)
fourier_df \
	.plot_timeseries(
		date_column  = 'date',
		value_column = 'value_fourier_1_1'

	)
```


### Visualize Multiple Fourier Series

With a little data transformation, we can visualize multiple fourier transformations:

```{python}

# augment fourier using 4 periods and max order of 1
fourier_df = m4_daily_df \
    .query('id == "D10"')\
    .tail(100) \
    .augment_fourier(
		date_column  = 'date',
		value_column = 'value',
		num_periods  = 4,
		max_order    = 1
    )

# transform data from wide to long
id_vars = ['id', 'date']
value_vars = [col for col in fourier_df.columns if col.startswith('value')]

fourlier_long_df = fourier_df \
    .melt(
        id_vars    = id_vars,
		value_vars = value_vars,
		value_name = 'fourier_value',
		var_name   = 'fourier_trans'

	) \
     .query(('fourier_trans != "value"')) # removing the original 'value' rows

fourlier_long_df \
    .groupby('fourier_trans') \
    .plot_timeseries(
		date_column  = 'date',
		value_column = 'fourier_value',
		facet_ncol   = 2,
		facet_scales = 'free'
	)

```
-->

{{< include ../_includes/_footer.qmd >}}