{
  "hash": "94fcd3d283df9a1918969ecfb0b96178",
  "result": {
    "markdown": "---\ntitle: PyTimeTK Basics\ntoc: true\ntoc-depth: 3\nnumber-sections: true\nnumber-depth: 2\ncode-fold: show\ncode-tools:\n  source: false\n  toggle: true\n---\n\n> *PyTimeTK has one mission:* To make time series analysis simpler, easier, and faster in Python. This goal requires some opinionated ways of treating time series in Python. We will conceptually lay out how `pytimetk` can help. \n\n::: {.callout-note collapse=\"false\"}\n## How this guide benefits you\n\nThis guide covers how to use `pytimetk` conceptually. Once you understand key concepts, you can go from basic to advanced time series analysis very fast. \n:::\n\n\n\nLet's first start with how to think about time series data conceptually. **Time series data has 3 core properties.** \n\n# The 3 Core Properties of Time Series Data\n\nEvery time series DataFrame should have the following properties:\n\n1. *Time Series Index:* A column containing 'datetime64' time stamps.\n2. *Value Columns:* One or more columns containing numeric data that can be aggregated and visualized by time\n3. *Group Columns (Optional):* One or more `categorical` or `str` columns that can be grouped by and time series can be evaluated by groups. \n\nIn practice here's what this looks like using the \"m4_daily\" dataset:\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\n# Import packages\nimport pytimetk as tk\nimport pandas as pd\nimport numpy as np\n\n# Import a Time Series Data Set\nm4_daily_df = tk.load_dataset(\"m4_daily\", parse_dates = ['date'])\nm4_daily_df\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>id</th>\n      <th>date</th>\n      <th>value</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>D10</td>\n      <td>2014-07-03</td>\n      <td>2076.2</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>D10</td>\n      <td>2014-07-04</td>\n      <td>2073.4</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>D10</td>\n      <td>2014-07-05</td>\n      <td>2048.7</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>D10</td>\n      <td>2014-07-06</td>\n      <td>2048.9</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>D10</td>\n      <td>2014-07-07</td>\n      <td>2006.4</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>9738</th>\n      <td>D500</td>\n      <td>2012-09-19</td>\n      <td>9418.8</td>\n    </tr>\n    <tr>\n      <th>9739</th>\n      <td>D500</td>\n      <td>2012-09-20</td>\n      <td>9365.7</td>\n    </tr>\n    <tr>\n      <th>9740</th>\n      <td>D500</td>\n      <td>2012-09-21</td>\n      <td>9445.9</td>\n    </tr>\n    <tr>\n      <th>9741</th>\n      <td>D500</td>\n      <td>2012-09-22</td>\n      <td>9497.9</td>\n    </tr>\n    <tr>\n      <th>9742</th>\n      <td>D500</td>\n      <td>2012-09-23</td>\n      <td>9545.3</td>\n    </tr>\n  </tbody>\n</table>\n<p>9743 rows × 3 columns</p>\n</div>\n```\n:::\n:::\n\n\n::: {.callout-note collapse=\"false\"}\n## (Example: m4_daily dataset) 3 Core Properties of Time Series Data\n\nWe can see that the `m4_daily` dataset has:\n\n1. *Time Series Index:* The `date` column\n2. *Value Column(s):* The `value` column\n3. *Group Column(s):* The `id` column\n:::\n\n::: {.callout-important collapse=\"false\"}\n## Missing any of the 3 Core Properties of Time Series Data\n\nIf your data is not formatted properly for `pytimetk`, meaning it's missing columns containing datetime, numeric values, or grouping columns, this can impact your ability to use `pytimetk` for time series anlysis. \n:::\n\n::: {.callout-important collapse=\"false\"}\n## No Pandas Index, No Problem\n\nTimetk standardizes using a date column. This is to reduce friction in converting to other package formats like `polars`, which don't use an an index (each row is indexed by its integer position). \n:::\n\n# The 2 Ways that Timetk Makes Time Series Analysis Easier\n\n::: {.callout-note collapse=\"false\"}\n## 2 Types of Time Series Functions\n\n1. Pandas `DataFrame` Operations\n2. Pandas `Series` Operations \n:::\n\nTimetk contains a number of functions designed to make time series analysis operations easier. In general, these operations come in <u>2 types of time series functions</u>:\n\n1. *Pandas DataFrame Operations:* These functions work on `pd.DataFrame` objects and derivatives such as `groupby()` objects for Grouped Time Series Analysis. You will see `data` as the first parameter in these functions. \n   \n2. *Pandas Series Operations:* These functions work on `pd.Series` objects.\n    \n   - *Time Series Index Operations:* Are designed for *Time Series index*. You will see `idx` as the first parameter of these functions. In these cases, these functions also work with `datetime64` values (e.g. those produced when you parse_dates via `pd.read_csv()` or create time series with `pd.date_range()`)\n   \n   - *Numeric Operations:* Are designed for *Numeric Values*. You will see `x` as the first parameter for these functions. \n\nLet's take a look at how to use the different types of Time Series Analysis functions in `pytimetk`. We'll start with Type 1: Pandas `DataFrame` Operations. \n\n## Type 1: Pandas DataFrame Operations\n\nBefore we start using `pytimetk`, let's make sure our data is set up properly. \n\n### Timetk Data Format Compliance\n\n::: {.callout-important collapse=\"false\"}\n## 3 Core Properties Must Be Upheald\n\nA `pytimetk`-Compliant Pandas `DataFrame` must have:\n\n1. *Time Series Index:* A Time Stamp column containing `datetime64` values\n2. *Value Column(s):* The value column(s) containing `float` or `int` values\n3. *Group Column(s):* Optionally for grouped time series analysis, one or more columns containg `str` or `categorical` values (shown as an object)\n\nIf these are NOT upheld, this will impact your ability to use `pytimetk` DataFrame operations. \n:::\n\n::: {.callout-tip collapse=\"false\"}\n## Inspect the DataFrame\n\nUse the `tk.glimpse()` method to check compliance. \n:::\n\nUsing pytimetk `glimpse()` method, we can see that we have a compliant data frame with a `date` column containing `datetime64` and a `value` column containing `float64`. For grouped analysis we have the `id` column containing `object` dtype. \n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\n# Tip: Inspect for compliance with glimpse()\nm4_daily_df.glimpse()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<class 'pandas.core.frame.DataFrame'>: 9743 rows of 3 columns\nid:     object            ['D10', 'D10', 'D10', 'D10', 'D10', 'D10', 'D1 ...\ndate:   datetime64[ns]    [Timestamp('2014-07-03 00:00:00'), Timestamp(' ...\nvalue:  float64           [2076.2, 2073.4, 2048.7, 2048.9, 2006.4, 2017. ...\n```\n:::\n:::\n\n\n### Grouped Time Series Analysis with Summarize By Time\n\nFirst, inspect how the `summarize_by_time` function works by calling `help()`. \n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\n# Review the summarize_by_time documentation (output not shown)\nhelp(tk.summarize_by_time)\n```\n:::\n\n\n::: {.callout-note collapse=\"false\"}\n## Help Doc Info: `summarize_by_time()`\n\n- The first parameter is `data`, indicating this is a `DataFrame` operation. \n- The Examples show different use cases for how to apply the function on a DataFrame\n:::\n\nLet's test the `summarize_by_time()` DataFrame operation out using the grouped approach with method chaining. DataFrame operations can be used as Pandas methods with method-chaining, which allows us to more succinctly apply time series operations.\n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\n# Grouped Summarize By Time with Method Chaining\ndf_summarized = (\n    m4_daily_df\n        .groupby('id')\n        .summarize_by_time(\n            date_column  = 'date',\n            value_column = 'value',\n            freq         = 'QS', # QS = Quarter Start\n            agg_func     = [\n                'mean', \n                'median', \n                'min',\n                ('q25', lambda x: np.quantile(x, 0.25)),\n                ('q75', lambda x: np.quantile(x, 0.75)),\n                'max',\n                ('range',lambda x: x.max() - x.min()),\n            ],\n        )\n)\n\ndf_summarized\n```\n\n::: {.cell-output .cell-output-display execution_count=4}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>id</th>\n      <th>date</th>\n      <th>value_mean</th>\n      <th>value_median</th>\n      <th>value_min</th>\n      <th>value_q25</th>\n      <th>value_q75</th>\n      <th>value_max</th>\n      <th>value_range</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>D10</td>\n      <td>2014-07-01</td>\n      <td>1960.078889</td>\n      <td>1979.90</td>\n      <td>1781.6</td>\n      <td>1915.225</td>\n      <td>2002.575</td>\n      <td>2076.2</td>\n      <td>294.6</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>D10</td>\n      <td>2014-10-01</td>\n      <td>2184.586957</td>\n      <td>2154.05</td>\n      <td>2022.8</td>\n      <td>2125.075</td>\n      <td>2274.150</td>\n      <td>2344.9</td>\n      <td>322.1</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>D10</td>\n      <td>2015-01-01</td>\n      <td>2309.830000</td>\n      <td>2312.30</td>\n      <td>2209.6</td>\n      <td>2284.575</td>\n      <td>2342.150</td>\n      <td>2392.4</td>\n      <td>182.8</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>D10</td>\n      <td>2015-04-01</td>\n      <td>2344.481319</td>\n      <td>2333.00</td>\n      <td>2185.1</td>\n      <td>2301.750</td>\n      <td>2391.000</td>\n      <td>2499.8</td>\n      <td>314.7</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>D10</td>\n      <td>2015-07-01</td>\n      <td>2156.754348</td>\n      <td>2186.70</td>\n      <td>1856.6</td>\n      <td>1997.250</td>\n      <td>2289.425</td>\n      <td>2368.1</td>\n      <td>511.5</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>105</th>\n      <td>D500</td>\n      <td>2011-07-01</td>\n      <td>9727.321739</td>\n      <td>9745.55</td>\n      <td>8964.5</td>\n      <td>9534.125</td>\n      <td>10003.900</td>\n      <td>10463.9</td>\n      <td>1499.4</td>\n    </tr>\n    <tr>\n      <th>106</th>\n      <td>D500</td>\n      <td>2011-10-01</td>\n      <td>8175.565217</td>\n      <td>7897.00</td>\n      <td>6755.0</td>\n      <td>7669.875</td>\n      <td>8592.575</td>\n      <td>9860.0</td>\n      <td>3105.0</td>\n    </tr>\n    <tr>\n      <th>107</th>\n      <td>D500</td>\n      <td>2012-01-01</td>\n      <td>8291.317582</td>\n      <td>8412.60</td>\n      <td>7471.5</td>\n      <td>7814.800</td>\n      <td>8677.850</td>\n      <td>8980.7</td>\n      <td>1509.2</td>\n    </tr>\n    <tr>\n      <th>108</th>\n      <td>D500</td>\n      <td>2012-04-01</td>\n      <td>8654.020879</td>\n      <td>8471.10</td>\n      <td>8245.6</td>\n      <td>8389.850</td>\n      <td>9017.250</td>\n      <td>9349.2</td>\n      <td>1103.6</td>\n    </tr>\n    <tr>\n      <th>109</th>\n      <td>D500</td>\n      <td>2012-07-01</td>\n      <td>8770.502353</td>\n      <td>8690.50</td>\n      <td>8348.1</td>\n      <td>8604.400</td>\n      <td>8846.000</td>\n      <td>9545.3</td>\n      <td>1197.2</td>\n    </tr>\n  </tbody>\n</table>\n<p>110 rows × 9 columns</p>\n</div>\n```\n:::\n:::\n\n\n::: {.callout-note collapse=\"false\"}\n## Key Takeaways: `summarize_by_time()`\n\n- The `data` must comply with the 3 core properties (date column, value column(s), and group column(s)) \n- The aggregation functions were applied by combination of group (id) and resample (Quarter Start)\n- The result was a pandas DataFrame with group column, resampled date column, and summary values (mean, median, min, 25th-quantile, etc)\n:::\n\n### Another DataFrame Example: Creating 29 Engineered Features\n\nLet's examine another `DataFrame` function, `tk.augment_timeseries_signature()`. Feel free to inspect the documentation with `help(tk.augment_timeseries_signature)`.\n\n::: {.cell execution_count=5}\n``` {.python .cell-code}\n# Creating 29 engineered features from the date column\n# Not run: help(tk.augment_timeseries_signature)\ndf_augmented = (\n    m4_daily_df\n        .augment_timeseries_signature(date_column = 'date')\n)\n\ndf_augmented.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=5}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>id</th>\n      <th>date</th>\n      <th>value</th>\n      <th>date_index_num</th>\n      <th>date_year</th>\n      <th>date_year_iso</th>\n      <th>date_yearstart</th>\n      <th>date_yearend</th>\n      <th>date_leapyear</th>\n      <th>date_half</th>\n      <th>...</th>\n      <th>date_mday</th>\n      <th>date_qday</th>\n      <th>date_yday</th>\n      <th>date_weekend</th>\n      <th>date_hour</th>\n      <th>date_minute</th>\n      <th>date_second</th>\n      <th>date_msecond</th>\n      <th>date_nsecond</th>\n      <th>date_am_pm</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>D10</td>\n      <td>2014-07-03</td>\n      <td>2076.2</td>\n      <td>1404345600</td>\n      <td>2014</td>\n      <td>2014</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>2</td>\n      <td>...</td>\n      <td>3</td>\n      <td>3</td>\n      <td>184</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>am</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>D10</td>\n      <td>2014-07-04</td>\n      <td>2073.4</td>\n      <td>1404432000</td>\n      <td>2014</td>\n      <td>2014</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>2</td>\n      <td>...</td>\n      <td>4</td>\n      <td>4</td>\n      <td>185</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>am</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>D10</td>\n      <td>2014-07-05</td>\n      <td>2048.7</td>\n      <td>1404518400</td>\n      <td>2014</td>\n      <td>2014</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>2</td>\n      <td>...</td>\n      <td>5</td>\n      <td>5</td>\n      <td>186</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>am</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>D10</td>\n      <td>2014-07-06</td>\n      <td>2048.9</td>\n      <td>1404604800</td>\n      <td>2014</td>\n      <td>2014</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>2</td>\n      <td>...</td>\n      <td>6</td>\n      <td>6</td>\n      <td>187</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>am</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>D10</td>\n      <td>2014-07-07</td>\n      <td>2006.4</td>\n      <td>1404691200</td>\n      <td>2014</td>\n      <td>2014</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>2</td>\n      <td>...</td>\n      <td>7</td>\n      <td>7</td>\n      <td>188</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>am</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows × 32 columns</p>\n</div>\n```\n:::\n:::\n\n\n::: {.callout-note collapse=\"false\"}\n## Key Takeaways: `augment_timeseries_signature()`\n\n- The `data` must comply with the 1 of the 3 core properties (date column) \n- The result was a pandas DataFrame with 29 time series features that can be used for Machine Learning and Forecasting\n:::\n\n\n### Making Future Dates with Future Frame\n\nA common time series task before forecasting with machine learning models is to make a future DataFrame some `length_out` into the future. You can do this with `tk.future_frame()`. Here's how. \n\n::: {.cell execution_count=6}\n``` {.python .cell-code}\n# Preparing a time series data set for Machine Learning Forecasting\nfull_augmented_df = (\n    m4_daily_df \n        .groupby('id')\n        .future_frame('date', length_out = 365)\n        .augment_timeseries_signature('date')\n)\nfull_augmented_df\n```\n\n::: {.cell-output .cell-output-display}\n```{=html}\n<script type=\"application/vnd.jupyter.widget-view+json\">\n{\"model_id\":\"7c0f757859134038945dde8e42694001\",\"version_major\":2,\"version_minor\":0,\"quarto_mimetype\":\"application/vnd.jupyter.widget-view+json\"}\n</script>\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=6}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>id</th>\n      <th>date</th>\n      <th>value</th>\n      <th>date_index_num</th>\n      <th>date_year</th>\n      <th>date_year_iso</th>\n      <th>date_yearstart</th>\n      <th>date_yearend</th>\n      <th>date_leapyear</th>\n      <th>date_half</th>\n      <th>...</th>\n      <th>date_mday</th>\n      <th>date_qday</th>\n      <th>date_yday</th>\n      <th>date_weekend</th>\n      <th>date_hour</th>\n      <th>date_minute</th>\n      <th>date_second</th>\n      <th>date_msecond</th>\n      <th>date_nsecond</th>\n      <th>date_am_pm</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>D10</td>\n      <td>2014-07-03</td>\n      <td>2076.2</td>\n      <td>1404345600</td>\n      <td>2014</td>\n      <td>2014</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>2</td>\n      <td>...</td>\n      <td>3</td>\n      <td>3</td>\n      <td>184</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>am</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>D10</td>\n      <td>2014-07-04</td>\n      <td>2073.4</td>\n      <td>1404432000</td>\n      <td>2014</td>\n      <td>2014</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>2</td>\n      <td>...</td>\n      <td>4</td>\n      <td>4</td>\n      <td>185</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>am</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>D10</td>\n      <td>2014-07-05</td>\n      <td>2048.7</td>\n      <td>1404518400</td>\n      <td>2014</td>\n      <td>2014</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>2</td>\n      <td>...</td>\n      <td>5</td>\n      <td>5</td>\n      <td>186</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>am</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>D10</td>\n      <td>2014-07-06</td>\n      <td>2048.9</td>\n      <td>1404604800</td>\n      <td>2014</td>\n      <td>2014</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>2</td>\n      <td>...</td>\n      <td>6</td>\n      <td>6</td>\n      <td>187</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>am</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>D10</td>\n      <td>2014-07-07</td>\n      <td>2006.4</td>\n      <td>1404691200</td>\n      <td>2014</td>\n      <td>2014</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>2</td>\n      <td>...</td>\n      <td>7</td>\n      <td>7</td>\n      <td>188</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>am</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>11198</th>\n      <td>D500</td>\n      <td>2013-09-19</td>\n      <td>NaN</td>\n      <td>1379548800</td>\n      <td>2013</td>\n      <td>2013</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>2</td>\n      <td>...</td>\n      <td>19</td>\n      <td>81</td>\n      <td>262</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>am</td>\n    </tr>\n    <tr>\n      <th>11199</th>\n      <td>D500</td>\n      <td>2013-09-20</td>\n      <td>NaN</td>\n      <td>1379635200</td>\n      <td>2013</td>\n      <td>2013</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>2</td>\n      <td>...</td>\n      <td>20</td>\n      <td>82</td>\n      <td>263</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>am</td>\n    </tr>\n    <tr>\n      <th>11200</th>\n      <td>D500</td>\n      <td>2013-09-21</td>\n      <td>NaN</td>\n      <td>1379721600</td>\n      <td>2013</td>\n      <td>2013</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>2</td>\n      <td>...</td>\n      <td>21</td>\n      <td>83</td>\n      <td>264</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>am</td>\n    </tr>\n    <tr>\n      <th>11201</th>\n      <td>D500</td>\n      <td>2013-09-22</td>\n      <td>NaN</td>\n      <td>1379808000</td>\n      <td>2013</td>\n      <td>2013</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>2</td>\n      <td>...</td>\n      <td>22</td>\n      <td>84</td>\n      <td>265</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>am</td>\n    </tr>\n    <tr>\n      <th>11202</th>\n      <td>D500</td>\n      <td>2013-09-23</td>\n      <td>NaN</td>\n      <td>1379894400</td>\n      <td>2013</td>\n      <td>2013</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>2</td>\n      <td>...</td>\n      <td>23</td>\n      <td>85</td>\n      <td>266</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>am</td>\n    </tr>\n  </tbody>\n</table>\n<p>11203 rows × 32 columns</p>\n</div>\n```\n:::\n:::\n\n\nWe can then get the future data by keying in on the data with `value` column that is missing (`np.nan`).\n\n::: {.cell execution_count=7}\n``` {.python .cell-code}\n# Get the future data (just the observations that haven't happened yet)\nfuture_df = (\n    full_augmented_df\n        .query('value.isna()')\n)\nfuture_df\n```\n\n::: {.cell-output .cell-output-display execution_count=7}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>id</th>\n      <th>date</th>\n      <th>value</th>\n      <th>date_index_num</th>\n      <th>date_year</th>\n      <th>date_year_iso</th>\n      <th>date_yearstart</th>\n      <th>date_yearend</th>\n      <th>date_leapyear</th>\n      <th>date_half</th>\n      <th>...</th>\n      <th>date_mday</th>\n      <th>date_qday</th>\n      <th>date_yday</th>\n      <th>date_weekend</th>\n      <th>date_hour</th>\n      <th>date_minute</th>\n      <th>date_second</th>\n      <th>date_msecond</th>\n      <th>date_nsecond</th>\n      <th>date_am_pm</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>9743</th>\n      <td>D10</td>\n      <td>2016-05-07</td>\n      <td>NaN</td>\n      <td>1462579200</td>\n      <td>2016</td>\n      <td>2016</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>...</td>\n      <td>7</td>\n      <td>37</td>\n      <td>128</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>am</td>\n    </tr>\n    <tr>\n      <th>9744</th>\n      <td>D10</td>\n      <td>2016-05-08</td>\n      <td>NaN</td>\n      <td>1462665600</td>\n      <td>2016</td>\n      <td>2016</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>...</td>\n      <td>8</td>\n      <td>38</td>\n      <td>129</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>am</td>\n    </tr>\n    <tr>\n      <th>9745</th>\n      <td>D10</td>\n      <td>2016-05-09</td>\n      <td>NaN</td>\n      <td>1462752000</td>\n      <td>2016</td>\n      <td>2016</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>...</td>\n      <td>9</td>\n      <td>39</td>\n      <td>130</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>am</td>\n    </tr>\n    <tr>\n      <th>9746</th>\n      <td>D10</td>\n      <td>2016-05-10</td>\n      <td>NaN</td>\n      <td>1462838400</td>\n      <td>2016</td>\n      <td>2016</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>...</td>\n      <td>10</td>\n      <td>40</td>\n      <td>131</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>am</td>\n    </tr>\n    <tr>\n      <th>9747</th>\n      <td>D10</td>\n      <td>2016-05-11</td>\n      <td>NaN</td>\n      <td>1462924800</td>\n      <td>2016</td>\n      <td>2016</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>...</td>\n      <td>11</td>\n      <td>41</td>\n      <td>132</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>am</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>11198</th>\n      <td>D500</td>\n      <td>2013-09-19</td>\n      <td>NaN</td>\n      <td>1379548800</td>\n      <td>2013</td>\n      <td>2013</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>2</td>\n      <td>...</td>\n      <td>19</td>\n      <td>81</td>\n      <td>262</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>am</td>\n    </tr>\n    <tr>\n      <th>11199</th>\n      <td>D500</td>\n      <td>2013-09-20</td>\n      <td>NaN</td>\n      <td>1379635200</td>\n      <td>2013</td>\n      <td>2013</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>2</td>\n      <td>...</td>\n      <td>20</td>\n      <td>82</td>\n      <td>263</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>am</td>\n    </tr>\n    <tr>\n      <th>11200</th>\n      <td>D500</td>\n      <td>2013-09-21</td>\n      <td>NaN</td>\n      <td>1379721600</td>\n      <td>2013</td>\n      <td>2013</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>2</td>\n      <td>...</td>\n      <td>21</td>\n      <td>83</td>\n      <td>264</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>am</td>\n    </tr>\n    <tr>\n      <th>11201</th>\n      <td>D500</td>\n      <td>2013-09-22</td>\n      <td>NaN</td>\n      <td>1379808000</td>\n      <td>2013</td>\n      <td>2013</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>2</td>\n      <td>...</td>\n      <td>22</td>\n      <td>84</td>\n      <td>265</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>am</td>\n    </tr>\n    <tr>\n      <th>11202</th>\n      <td>D500</td>\n      <td>2013-09-23</td>\n      <td>NaN</td>\n      <td>1379894400</td>\n      <td>2013</td>\n      <td>2013</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>2</td>\n      <td>...</td>\n      <td>23</td>\n      <td>85</td>\n      <td>266</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>am</td>\n    </tr>\n  </tbody>\n</table>\n<p>1460 rows × 32 columns</p>\n</div>\n```\n:::\n:::\n\n\n## Type 2: Pandas Series Operations\n\nThe main difference between a `DataFrame` operation and a Series operation is that we are operating on an array of values from typically one of the following `dtypes`:\n\n1. Timestamps (`datetime64`)\n2. Numeric (`float64` or `int64`) \n\nThe first argument of Series operations that operate on Timestamps will always be `idx`. \n\nLet's take a look at one shall we? We'll start with a common action: Making future time series from an existing time series with a regular frequency. \n\n### The Make Future Time Series Function\n\nSay we have a monthly sequence of timestamps. What if we want to create a forecast where we predict 12 months into the future? Well, we will need to create 12 future timestamps. Here's how. \n\nFirst create a `pd.date_range()` with dates starting at the beginning of each month.\n\n::: {.cell execution_count=8}\n``` {.python .cell-code}\n# Make a monthly date range\ndates_dt = pd.date_range(\"2023-01\", \"2024-01\", freq=\"MS\")\ndates_dt\n```\n\n::: {.cell-output .cell-output-display execution_count=8}\n```\nDatetimeIndex(['2023-01-01', '2023-02-01', '2023-03-01', '2023-04-01',\n               '2023-05-01', '2023-06-01', '2023-07-01', '2023-08-01',\n               '2023-09-01', '2023-10-01', '2023-11-01', '2023-12-01',\n               '2024-01-01'],\n              dtype='datetime64[ns]', freq='MS')\n```\n:::\n:::\n\n\nNext, use `tk.make_future_timeseries()` to create the next 12 timestamps in the sequence. \n\n::: {.panel-tabset group=\"future-dates\"}\n\n## Pandas Series\n\n::: {.cell execution_count=9}\n``` {.python .cell-code}\n# Pandas Series: Future Dates\nfuture_series = pd.Series(dates_dt).make_future_timeseries(12)\nfuture_series\n```\n\n::: {.cell-output .cell-output-display execution_count=9}\n```\n0    2024-02-01\n1    2024-03-01\n2    2024-04-01\n3    2024-05-01\n4    2024-06-01\n5    2024-07-01\n6    2024-08-01\n7    2024-09-01\n8    2024-10-01\n9    2024-11-01\n10   2024-12-01\n11   2025-01-01\ndtype: datetime64[ns]\n```\n:::\n:::\n\n\n## DateTimeIndex\n\n::: {.cell execution_count=10}\n``` {.python .cell-code}\n# DateTimeIndex: Future Dates\nfuture_dt = tk.make_future_timeseries(\n    idx      = dates_dt,\n    length_out = 12\n)\nfuture_dt\n```\n\n::: {.cell-output .cell-output-display execution_count=10}\n```\n0    2024-02-01\n1    2024-03-01\n2    2024-04-01\n3    2024-05-01\n4    2024-06-01\n5    2024-07-01\n6    2024-08-01\n7    2024-09-01\n8    2024-10-01\n9    2024-11-01\n10   2024-12-01\n11   2025-01-01\ndtype: datetime64[ns]\n```\n:::\n:::\n\n\n:::\n\nWe can combine the actual and future timestamps into one combined timeseries.  \n\n::: {.cell execution_count=11}\n``` {.python .cell-code}\n# Combining the 2 series and resetting the index\ncombined_timeseries = (\n    pd.concat(\n        [pd.Series(dates_dt), pd.Series(future_dt)],\n        axis=0\n    )\n        .reset_index(drop = True)\n)\n\ncombined_timeseries\n```\n\n::: {.cell-output .cell-output-display execution_count=11}\n```\n0    2023-01-01\n1    2023-02-01\n2    2023-03-01\n3    2023-04-01\n4    2023-05-01\n5    2023-06-01\n6    2023-07-01\n7    2023-08-01\n8    2023-09-01\n9    2023-10-01\n10   2023-11-01\n11   2023-12-01\n12   2024-01-01\n13   2024-02-01\n14   2024-03-01\n15   2024-04-01\n16   2024-05-01\n17   2024-06-01\n18   2024-07-01\n19   2024-08-01\n20   2024-09-01\n21   2024-10-01\n22   2024-11-01\n23   2024-12-01\n24   2025-01-01\ndtype: datetime64[ns]\n```\n:::\n:::\n\n\nNext, we'll take a look at how to go from an irregular time series to a regular time series. \n\n### Flooring Dates\n\nAn example is `tk.floor_date`, which is used to round down dates. See `help(tk.floor_date)`.\n\nFlooring dates is often used as part of a strategy to go from an irregular time series to regular by combining with an aggregation. Often `summarize_by_time()` is used (I'll share why shortly). But conceptually, date flooring is the secret. \n\n\n::: {.panel-tabset group=\"flooring\"}\n\n## With Flooring\n\n::: {.cell execution_count=12}\n``` {.python .cell-code}\n# Monthly flooring rounds dates down to 1st of the month\nm4_daily_df['date'].floor_date(unit = \"M\")\n```\n\n::: {.cell-output .cell-output-display execution_count=12}\n```\n0      2014-07-01\n1      2014-07-01\n2      2014-07-01\n3      2014-07-01\n4      2014-07-01\n          ...    \n9738   2014-07-01\n9739   2014-07-01\n9740   2014-07-01\n9741   2014-07-01\n9742   2014-07-01\nName: date, Length: 9743, dtype: datetime64[ns]\n```\n:::\n:::\n\n\n## Without Flooring\n\n::: {.cell execution_count=13}\n``` {.python .cell-code}\n# Before Flooring\nm4_daily_df['date']\n```\n\n::: {.cell-output .cell-output-display execution_count=13}\n```\n0      2014-07-03\n1      2014-07-03\n2      2014-07-03\n3      2014-07-03\n4      2014-07-03\n          ...    \n9738   2014-07-03\n9739   2014-07-03\n9740   2014-07-03\n9741   2014-07-03\n9742   2014-07-03\nName: date, Length: 9743, dtype: datetime64[ns]\n```\n:::\n:::\n\n\n:::\n\nThis \"date flooring\" operation can be useful for creating date groupings.\n\n::: {.cell execution_count=14}\n``` {.python .cell-code}\n# Adding a date group with floor_date()\ndates_grouped_by_month = (\n    m4_daily_df\n        .assign(date_group = lambda x: x['date'].floor_date(\"M\"))\n)\n\ndates_grouped_by_month\n```\n\n::: {.cell-output .cell-output-display execution_count=14}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>id</th>\n      <th>date</th>\n      <th>value</th>\n      <th>date_group</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>D10</td>\n      <td>2014-07-03</td>\n      <td>2076.2</td>\n      <td>2014-07-01</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>D10</td>\n      <td>2014-07-03</td>\n      <td>2073.4</td>\n      <td>2014-07-01</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>D10</td>\n      <td>2014-07-03</td>\n      <td>2048.7</td>\n      <td>2014-07-01</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>D10</td>\n      <td>2014-07-03</td>\n      <td>2048.9</td>\n      <td>2014-07-01</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>D10</td>\n      <td>2014-07-03</td>\n      <td>2006.4</td>\n      <td>2014-07-01</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>9738</th>\n      <td>D500</td>\n      <td>2014-07-03</td>\n      <td>9418.8</td>\n      <td>2014-07-01</td>\n    </tr>\n    <tr>\n      <th>9739</th>\n      <td>D500</td>\n      <td>2014-07-03</td>\n      <td>9365.7</td>\n      <td>2014-07-01</td>\n    </tr>\n    <tr>\n      <th>9740</th>\n      <td>D500</td>\n      <td>2014-07-03</td>\n      <td>9445.9</td>\n      <td>2014-07-01</td>\n    </tr>\n    <tr>\n      <th>9741</th>\n      <td>D500</td>\n      <td>2014-07-03</td>\n      <td>9497.9</td>\n      <td>2014-07-01</td>\n    </tr>\n    <tr>\n      <th>9742</th>\n      <td>D500</td>\n      <td>2014-07-03</td>\n      <td>9545.3</td>\n      <td>2014-07-01</td>\n    </tr>\n  </tbody>\n</table>\n<p>9743 rows × 4 columns</p>\n</div>\n```\n:::\n:::\n\n\nWe can then do grouped operations. \n\n::: {.cell execution_count=15}\n``` {.python .cell-code}\n# Example of a grouped operation with floored dates\nsummary_df = (\n    dates_grouped_by_month\n        .drop('date', axis=1) \\\n        .groupby(['id', 'date_group'])\n        .mean() \\\n        .reset_index()\n)\n\nsummary_df\n```\n\n::: {.cell-output .cell-output-display execution_count=15}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>id</th>\n      <th>date_group</th>\n      <th>value</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>D10</td>\n      <td>2014-07-01</td>\n      <td>2261.606825</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>D160</td>\n      <td>2014-07-01</td>\n      <td>9243.155254</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>D410</td>\n      <td>2014-07-01</td>\n      <td>8259.786346</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>D500</td>\n      <td>2014-07-01</td>\n      <td>8287.728789</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nOf course for this operation, we can do it faster with `summarize_by_time()` (and it's much more flexible). \n\n::: {.cell execution_count=16}\n``` {.python .cell-code}\n# Summarize by time is less code and more flexible\n(\n    m4_daily_df \n        .groupby('id')\n        .summarize_by_time(\n            'date', 'value', \n            freq = \"MS\",\n            agg_func = ['mean', 'median', 'min', 'max']\n        )\n)\n```\n\n::: {.cell-output .cell-output-display execution_count=16}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>id</th>\n      <th>date</th>\n      <th>value_mean</th>\n      <th>value_median</th>\n      <th>value_min</th>\n      <th>value_max</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>D10</td>\n      <td>2014-07-01</td>\n      <td>2261.606825</td>\n      <td>2302.30</td>\n      <td>1781.60</td>\n      <td>2649.30</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>D160</td>\n      <td>2014-07-01</td>\n      <td>9243.155254</td>\n      <td>10097.30</td>\n      <td>1734.90</td>\n      <td>19432.50</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>D410</td>\n      <td>2014-07-01</td>\n      <td>8259.786346</td>\n      <td>8382.81</td>\n      <td>6309.38</td>\n      <td>9540.62</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>D500</td>\n      <td>2014-07-01</td>\n      <td>8287.728789</td>\n      <td>7662.10</td>\n      <td>4172.10</td>\n      <td>14954.10</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nAnd that's the core idea behind `pytimetk`, writing less code and getting more. \n\n\n\nNext, let's do one more function. The brother of `augment_timeseries_signature()`...\n\n### The Get Time Series Signature Function\n\nThis function takes a pandas `Series` or `DateTimeIndex` and returns a `DataFrame` containing the 29 engineered features. \n\nStart with either a DateTimeIndex...\n\n::: {.cell execution_count=17}\n``` {.python .cell-code}\ntimestamps_dt = pd.date_range(\"2023\", \"2024\", freq = \"D\")\ntimestamps_dt\n```\n\n::: {.cell-output .cell-output-display execution_count=17}\n```\nDatetimeIndex(['2023-01-01', '2023-01-02', '2023-01-03', '2023-01-04',\n               '2023-01-05', '2023-01-06', '2023-01-07', '2023-01-08',\n               '2023-01-09', '2023-01-10',\n               ...\n               '2023-12-23', '2023-12-24', '2023-12-25', '2023-12-26',\n               '2023-12-27', '2023-12-28', '2023-12-29', '2023-12-30',\n               '2023-12-31', '2024-01-01'],\n              dtype='datetime64[ns]', length=366, freq='D')\n```\n:::\n:::\n\n\n... Or a Pandas Series.\n\n::: {.cell execution_count=18}\n``` {.python .cell-code}\ntimestamps_series = pd.Series(timestamps_dt)\ntimestamps_series\n```\n\n::: {.cell-output .cell-output-display execution_count=18}\n```\n0     2023-01-01\n1     2023-01-02\n2     2023-01-03\n3     2023-01-04\n4     2023-01-05\n         ...    \n361   2023-12-28\n362   2023-12-29\n363   2023-12-30\n364   2023-12-31\n365   2024-01-01\nLength: 366, dtype: datetime64[ns]\n```\n:::\n:::\n\n\nAnd you can use the pandas Series function, `tk.get_timeseries_signature()` to create 29 features from the date sequence. \n\n::: {.panel-tabset group=\"get_timeseries_signature\"}\n\n## Pandas Series\n\n::: {.cell execution_count=19}\n``` {.python .cell-code}\n# Pandas series: get_timeseries_signature\ntimestamps_series.get_timeseries_signature()\n```\n\n::: {.cell-output .cell-output-display execution_count=19}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>idx</th>\n      <th>idx_index_num</th>\n      <th>idx_year</th>\n      <th>idx_year_iso</th>\n      <th>idx_yearstart</th>\n      <th>idx_yearend</th>\n      <th>idx_leapyear</th>\n      <th>idx_half</th>\n      <th>idx_quarter</th>\n      <th>idx_quarteryear</th>\n      <th>...</th>\n      <th>idx_mday</th>\n      <th>idx_qday</th>\n      <th>idx_yday</th>\n      <th>idx_weekend</th>\n      <th>idx_hour</th>\n      <th>idx_minute</th>\n      <th>idx_second</th>\n      <th>idx_msecond</th>\n      <th>idx_nsecond</th>\n      <th>idx_am_pm</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>2023-01-01</td>\n      <td>1672531200</td>\n      <td>2023</td>\n      <td>2022</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>2023Q1</td>\n      <td>...</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>am</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2023-01-02</td>\n      <td>1672617600</td>\n      <td>2023</td>\n      <td>2023</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>2023Q1</td>\n      <td>...</td>\n      <td>2</td>\n      <td>2</td>\n      <td>2</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>am</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2023-01-03</td>\n      <td>1672704000</td>\n      <td>2023</td>\n      <td>2023</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>2023Q1</td>\n      <td>...</td>\n      <td>3</td>\n      <td>3</td>\n      <td>3</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>am</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>2023-01-04</td>\n      <td>1672790400</td>\n      <td>2023</td>\n      <td>2023</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>2023Q1</td>\n      <td>...</td>\n      <td>4</td>\n      <td>4</td>\n      <td>4</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>am</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>2023-01-05</td>\n      <td>1672876800</td>\n      <td>2023</td>\n      <td>2023</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>2023Q1</td>\n      <td>...</td>\n      <td>5</td>\n      <td>5</td>\n      <td>5</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>am</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>361</th>\n      <td>2023-12-28</td>\n      <td>1703721600</td>\n      <td>2023</td>\n      <td>2023</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>2</td>\n      <td>4</td>\n      <td>2023Q4</td>\n      <td>...</td>\n      <td>28</td>\n      <td>89</td>\n      <td>362</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>am</td>\n    </tr>\n    <tr>\n      <th>362</th>\n      <td>2023-12-29</td>\n      <td>1703808000</td>\n      <td>2023</td>\n      <td>2023</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>2</td>\n      <td>4</td>\n      <td>2023Q4</td>\n      <td>...</td>\n      <td>29</td>\n      <td>90</td>\n      <td>363</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>am</td>\n    </tr>\n    <tr>\n      <th>363</th>\n      <td>2023-12-30</td>\n      <td>1703894400</td>\n      <td>2023</td>\n      <td>2023</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>2</td>\n      <td>4</td>\n      <td>2023Q4</td>\n      <td>...</td>\n      <td>30</td>\n      <td>91</td>\n      <td>364</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>am</td>\n    </tr>\n    <tr>\n      <th>364</th>\n      <td>2023-12-31</td>\n      <td>1703980800</td>\n      <td>2023</td>\n      <td>2023</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>2</td>\n      <td>4</td>\n      <td>2023Q4</td>\n      <td>...</td>\n      <td>31</td>\n      <td>92</td>\n      <td>365</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>am</td>\n    </tr>\n    <tr>\n      <th>365</th>\n      <td>2024-01-01</td>\n      <td>1704067200</td>\n      <td>2024</td>\n      <td>2024</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>2024Q1</td>\n      <td>...</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>am</td>\n    </tr>\n  </tbody>\n</table>\n<p>366 rows × 30 columns</p>\n</div>\n```\n:::\n:::\n\n\n## DateTimeIndex\n\n::: {.cell execution_count=20}\n``` {.python .cell-code}\n# DateTimeIndex: get_timeseries_signature\ntk.get_timeseries_signature(timestamps_dt)\n```\n\n::: {.cell-output .cell-output-display execution_count=20}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>idx</th>\n      <th>idx_index_num</th>\n      <th>idx_year</th>\n      <th>idx_year_iso</th>\n      <th>idx_yearstart</th>\n      <th>idx_yearend</th>\n      <th>idx_leapyear</th>\n      <th>idx_half</th>\n      <th>idx_quarter</th>\n      <th>idx_quarteryear</th>\n      <th>...</th>\n      <th>idx_mday</th>\n      <th>idx_qday</th>\n      <th>idx_yday</th>\n      <th>idx_weekend</th>\n      <th>idx_hour</th>\n      <th>idx_minute</th>\n      <th>idx_second</th>\n      <th>idx_msecond</th>\n      <th>idx_nsecond</th>\n      <th>idx_am_pm</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>2023-01-01</td>\n      <td>1672531200</td>\n      <td>2023</td>\n      <td>2022</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>2023Q1</td>\n      <td>...</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>am</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2023-01-02</td>\n      <td>1672617600</td>\n      <td>2023</td>\n      <td>2023</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>2023Q1</td>\n      <td>...</td>\n      <td>2</td>\n      <td>2</td>\n      <td>2</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>am</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2023-01-03</td>\n      <td>1672704000</td>\n      <td>2023</td>\n      <td>2023</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>2023Q1</td>\n      <td>...</td>\n      <td>3</td>\n      <td>3</td>\n      <td>3</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>am</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>2023-01-04</td>\n      <td>1672790400</td>\n      <td>2023</td>\n      <td>2023</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>2023Q1</td>\n      <td>...</td>\n      <td>4</td>\n      <td>4</td>\n      <td>4</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>am</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>2023-01-05</td>\n      <td>1672876800</td>\n      <td>2023</td>\n      <td>2023</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>2023Q1</td>\n      <td>...</td>\n      <td>5</td>\n      <td>5</td>\n      <td>5</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>am</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>361</th>\n      <td>2023-12-28</td>\n      <td>1703721600</td>\n      <td>2023</td>\n      <td>2023</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>2</td>\n      <td>4</td>\n      <td>2023Q4</td>\n      <td>...</td>\n      <td>28</td>\n      <td>89</td>\n      <td>362</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>am</td>\n    </tr>\n    <tr>\n      <th>362</th>\n      <td>2023-12-29</td>\n      <td>1703808000</td>\n      <td>2023</td>\n      <td>2023</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>2</td>\n      <td>4</td>\n      <td>2023Q4</td>\n      <td>...</td>\n      <td>29</td>\n      <td>90</td>\n      <td>363</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>am</td>\n    </tr>\n    <tr>\n      <th>363</th>\n      <td>2023-12-30</td>\n      <td>1703894400</td>\n      <td>2023</td>\n      <td>2023</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>2</td>\n      <td>4</td>\n      <td>2023Q4</td>\n      <td>...</td>\n      <td>30</td>\n      <td>91</td>\n      <td>364</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>am</td>\n    </tr>\n    <tr>\n      <th>364</th>\n      <td>2023-12-31</td>\n      <td>1703980800</td>\n      <td>2023</td>\n      <td>2023</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>2</td>\n      <td>4</td>\n      <td>2023Q4</td>\n      <td>...</td>\n      <td>31</td>\n      <td>92</td>\n      <td>365</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>am</td>\n    </tr>\n    <tr>\n      <th>365</th>\n      <td>2024-01-01</td>\n      <td>1704067200</td>\n      <td>2024</td>\n      <td>2024</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>2024Q1</td>\n      <td>...</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>am</td>\n    </tr>\n  </tbody>\n</table>\n<p>366 rows × 30 columns</p>\n</div>\n```\n:::\n:::\n\n\n:::\n\n# Next steps\n\nCheck out the [Pandas Frequency Guide next.](/guides/03_pandas_frequency.html)\n\n# More Coming Soon...\n\nWe are in the early stages of development. But it's obvious the potential for `pytimetk` now in Python. 🐍\n\n- Please [⭐ us on GitHub](https://github.com/business-science/pytimetk) (it takes 2-seconds and means a lot). \n- To make requests, please see our [Project Roadmap GH Issue #2](https://github.com/business-science/pytimetk/issues/2). You can make requests there. \n- Want to contribute? [See our contributing guide here.](/contributing.html) \n\n",
    "supporting": [
      "02_timetk_concepts_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n<script src=\"https://unpkg.com/@jupyter-widgets/html-manager@*/dist/embed-amd.js\" crossorigin=\"anonymous\"></script>\n"
      ],
      "include-after-body": [
        "<script type=application/vnd.jupyter.widget-state+json>\n{\"state\":{\"29d29c674dae4f0e9d708a00a2d96072\":{\"model_module\":\"@jupyter-widgets/controls\",\"model_module_version\":\"2.0.0\",\"model_name\":\"HTMLModel\",\"state\":{\"_dom_classes\":[],\"_model_module\":\"@jupyter-widgets/controls\",\"_model_module_version\":\"2.0.0\",\"_model_name\":\"HTMLModel\",\"_view_count\":null,\"_view_module\":\"@jupyter-widgets/controls\",\"_view_module_version\":\"2.0.0\",\"_view_name\":\"HTMLView\",\"description\":\"\",\"description_allow_html\":false,\"layout\":\"IPY_MODEL_a002d653f2d3449e85d87a4fd0dafe47\",\"placeholder\":\"​\",\"style\":\"IPY_MODEL_7a41d8cf7a834164a27b3c9f45191b1f\",\"tabbable\":null,\"tooltip\":null,\"value\":\"Future framing...: 100%\"}},\"38092b444ee54dab827c741e5b26e875\":{\"model_module\":\"@jupyter-widgets/controls\",\"model_module_version\":\"2.0.0\",\"model_name\":\"ProgressStyleModel\",\"state\":{\"_model_module\":\"@jupyter-widgets/controls\",\"_model_module_version\":\"2.0.0\",\"_model_name\":\"ProgressStyleModel\",\"_view_count\":null,\"_view_module\":\"@jupyter-widgets/base\",\"_view_module_version\":\"2.0.0\",\"_view_name\":\"StyleView\",\"bar_color\":null,\"description_width\":\"\"}},\"3e9efa3f0c3a41a5b9eef419d9327e0e\":{\"model_module\":\"@jupyter-widgets/controls\",\"model_module_version\":\"2.0.0\",\"model_name\":\"HTMLStyleModel\",\"state\":{\"_model_module\":\"@jupyter-widgets/controls\",\"_model_module_version\":\"2.0.0\",\"_model_name\":\"HTMLStyleModel\",\"_view_count\":null,\"_view_module\":\"@jupyter-widgets/base\",\"_view_module_version\":\"2.0.0\",\"_view_name\":\"StyleView\",\"background\":null,\"description_width\":\"\",\"font_size\":null,\"text_color\":null}},\"78cf962d15a847d1be48fa168f204b84\":{\"model_module\":\"@jupyter-widgets/controls\",\"model_module_version\":\"2.0.0\",\"model_name\":\"HTMLModel\",\"state\":{\"_dom_classes\":[],\"_model_module\":\"@jupyter-widgets/controls\",\"_model_module_version\":\"2.0.0\",\"_model_name\":\"HTMLModel\",\"_view_count\":null,\"_view_module\":\"@jupyter-widgets/controls\",\"_view_module_version\":\"2.0.0\",\"_view_name\":\"HTMLView\",\"description\":\"\",\"description_allow_html\":false,\"layout\":\"IPY_MODEL_f9967e6b2c844508be94d7eaf04ef840\",\"placeholder\":\"​\",\"style\":\"IPY_MODEL_3e9efa3f0c3a41a5b9eef419d9327e0e\",\"tabbable\":null,\"tooltip\":null,\"value\":\" 4/4 [00:00&lt;00:00, 206.60it/s]\"}},\"7a41d8cf7a834164a27b3c9f45191b1f\":{\"model_module\":\"@jupyter-widgets/controls\",\"model_module_version\":\"2.0.0\",\"model_name\":\"HTMLStyleModel\",\"state\":{\"_model_module\":\"@jupyter-widgets/controls\",\"_model_module_version\":\"2.0.0\",\"_model_name\":\"HTMLStyleModel\",\"_view_count\":null,\"_view_module\":\"@jupyter-widgets/base\",\"_view_module_version\":\"2.0.0\",\"_view_name\":\"StyleView\",\"background\":null,\"description_width\":\"\",\"font_size\":null,\"text_color\":null}},\"7c0f757859134038945dde8e42694001\":{\"model_module\":\"@jupyter-widgets/controls\",\"model_module_version\":\"2.0.0\",\"model_name\":\"HBoxModel\",\"state\":{\"_dom_classes\":[],\"_model_module\":\"@jupyter-widgets/controls\",\"_model_module_version\":\"2.0.0\",\"_model_name\":\"HBoxModel\",\"_view_count\":null,\"_view_module\":\"@jupyter-widgets/controls\",\"_view_module_version\":\"2.0.0\",\"_view_name\":\"HBoxView\",\"box_style\":\"\",\"children\":[\"IPY_MODEL_29d29c674dae4f0e9d708a00a2d96072\",\"IPY_MODEL_f8c7da4d7cf54deeb3fe4767a3b87bf7\",\"IPY_MODEL_78cf962d15a847d1be48fa168f204b84\"],\"layout\":\"IPY_MODEL_8c882f826f3d4ec5b5de37719e6a64b3\",\"tabbable\":null,\"tooltip\":null}},\"7df0d16d6727453b9b86270252a21760\":{\"model_module\":\"@jupyter-widgets/base\",\"model_module_version\":\"2.0.0\",\"model_name\":\"LayoutModel\",\"state\":{\"_model_module\":\"@jupyter-widgets/base\",\"_model_module_version\":\"2.0.0\",\"_model_name\":\"LayoutModel\",\"_view_count\":null,\"_view_module\":\"@jupyter-widgets/base\",\"_view_module_version\":\"2.0.0\",\"_view_name\":\"LayoutView\",\"align_content\":null,\"align_items\":null,\"align_self\":null,\"border_bottom\":null,\"border_left\":null,\"border_right\":null,\"border_top\":null,\"bottom\":null,\"display\":null,\"flex\":null,\"flex_flow\":null,\"grid_area\":null,\"grid_auto_columns\":null,\"grid_auto_flow\":null,\"grid_auto_rows\":null,\"grid_column\":null,\"grid_gap\":null,\"grid_row\":null,\"grid_template_areas\":null,\"grid_template_columns\":null,\"grid_template_rows\":null,\"height\":null,\"justify_content\":null,\"justify_items\":null,\"left\":null,\"margin\":null,\"max_height\":null,\"max_width\":null,\"min_height\":null,\"min_width\":null,\"object_fit\":null,\"object_position\":null,\"order\":null,\"overflow\":null,\"padding\":null,\"right\":null,\"top\":null,\"visibility\":null,\"width\":null}},\"8c882f826f3d4ec5b5de37719e6a64b3\":{\"model_module\":\"@jupyter-widgets/base\",\"model_module_version\":\"2.0.0\",\"model_name\":\"LayoutModel\",\"state\":{\"_model_module\":\"@jupyter-widgets/base\",\"_model_module_version\":\"2.0.0\",\"_model_name\":\"LayoutModel\",\"_view_count\":null,\"_view_module\":\"@jupyter-widgets/base\",\"_view_module_version\":\"2.0.0\",\"_view_name\":\"LayoutView\",\"align_content\":null,\"align_items\":null,\"align_self\":null,\"border_bottom\":null,\"border_left\":null,\"border_right\":null,\"border_top\":null,\"bottom\":null,\"display\":null,\"flex\":null,\"flex_flow\":null,\"grid_area\":null,\"grid_auto_columns\":null,\"grid_auto_flow\":null,\"grid_auto_rows\":null,\"grid_column\":null,\"grid_gap\":null,\"grid_row\":null,\"grid_template_areas\":null,\"grid_template_columns\":null,\"grid_template_rows\":null,\"height\":null,\"justify_content\":null,\"justify_items\":null,\"left\":null,\"margin\":null,\"max_height\":null,\"max_width\":null,\"min_height\":null,\"min_width\":null,\"object_fit\":null,\"object_position\":null,\"order\":null,\"overflow\":null,\"padding\":null,\"right\":null,\"top\":null,\"visibility\":null,\"width\":null}},\"a002d653f2d3449e85d87a4fd0dafe47\":{\"model_module\":\"@jupyter-widgets/base\",\"model_module_version\":\"2.0.0\",\"model_name\":\"LayoutModel\",\"state\":{\"_model_module\":\"@jupyter-widgets/base\",\"_model_module_version\":\"2.0.0\",\"_model_name\":\"LayoutModel\",\"_view_count\":null,\"_view_module\":\"@jupyter-widgets/base\",\"_view_module_version\":\"2.0.0\",\"_view_name\":\"LayoutView\",\"align_content\":null,\"align_items\":null,\"align_self\":null,\"border_bottom\":null,\"border_left\":null,\"border_right\":null,\"border_top\":null,\"bottom\":null,\"display\":null,\"flex\":null,\"flex_flow\":null,\"grid_area\":null,\"grid_auto_columns\":null,\"grid_auto_flow\":null,\"grid_auto_rows\":null,\"grid_column\":null,\"grid_gap\":null,\"grid_row\":null,\"grid_template_areas\":null,\"grid_template_columns\":null,\"grid_template_rows\":null,\"height\":null,\"justify_content\":null,\"justify_items\":null,\"left\":null,\"margin\":null,\"max_height\":null,\"max_width\":null,\"min_height\":null,\"min_width\":null,\"object_fit\":null,\"object_position\":null,\"order\":null,\"overflow\":null,\"padding\":null,\"right\":null,\"top\":null,\"visibility\":null,\"width\":null}},\"f8c7da4d7cf54deeb3fe4767a3b87bf7\":{\"model_module\":\"@jupyter-widgets/controls\",\"model_module_version\":\"2.0.0\",\"model_name\":\"FloatProgressModel\",\"state\":{\"_dom_classes\":[],\"_model_module\":\"@jupyter-widgets/controls\",\"_model_module_version\":\"2.0.0\",\"_model_name\":\"FloatProgressModel\",\"_view_count\":null,\"_view_module\":\"@jupyter-widgets/controls\",\"_view_module_version\":\"2.0.0\",\"_view_name\":\"ProgressView\",\"bar_style\":\"success\",\"description\":\"\",\"description_allow_html\":false,\"layout\":\"IPY_MODEL_7df0d16d6727453b9b86270252a21760\",\"max\":4,\"min\":0,\"orientation\":\"horizontal\",\"style\":\"IPY_MODEL_38092b444ee54dab827c741e5b26e875\",\"tabbable\":null,\"tooltip\":null,\"value\":4}},\"f9967e6b2c844508be94d7eaf04ef840\":{\"model_module\":\"@jupyter-widgets/base\",\"model_module_version\":\"2.0.0\",\"model_name\":\"LayoutModel\",\"state\":{\"_model_module\":\"@jupyter-widgets/base\",\"_model_module_version\":\"2.0.0\",\"_model_name\":\"LayoutModel\",\"_view_count\":null,\"_view_module\":\"@jupyter-widgets/base\",\"_view_module_version\":\"2.0.0\",\"_view_name\":\"LayoutView\",\"align_content\":null,\"align_items\":null,\"align_self\":null,\"border_bottom\":null,\"border_left\":null,\"border_right\":null,\"border_top\":null,\"bottom\":null,\"display\":null,\"flex\":null,\"flex_flow\":null,\"grid_area\":null,\"grid_auto_columns\":null,\"grid_auto_flow\":null,\"grid_auto_rows\":null,\"grid_column\":null,\"grid_gap\":null,\"grid_row\":null,\"grid_template_areas\":null,\"grid_template_columns\":null,\"grid_template_rows\":null,\"height\":null,\"justify_content\":null,\"justify_items\":null,\"left\":null,\"margin\":null,\"max_height\":null,\"max_width\":null,\"min_height\":null,\"min_width\":null,\"object_fit\":null,\"object_position\":null,\"order\":null,\"overflow\":null,\"padding\":null,\"right\":null,\"top\":null,\"visibility\":null,\"width\":null}}},\"version_major\":2,\"version_minor\":0}\n</script>\n"
      ]
    }
  }
}