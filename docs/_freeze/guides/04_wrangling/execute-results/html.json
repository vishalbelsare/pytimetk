{
  "hash": "49cea69b2211892ace6b27bbb2711f46",
  "result": {
    "markdown": "---\ntitle: Data Wrangling\ntoc: true\ntoc-depth: 3\nnumber-sections: true\nnumber-depth: 2\ncode-fold: show\ncode-tools:\n  source: false\n  toggle: true\n---\n\nThis section will cover data wrangling for timeseries using pytimetk. We'll show examples for the following functions:\n\n* `summarize_by_time()`\n* `future_frame()`\n* `pad_by_time()`\n\n::: {.callout-note collapse=\"false\"}\n## Perequisite\n\nBefore proceeding, be sure to review the Timetk Basics section if you haven't already.\n\n:::\n\n# Summarize by Time\n\n`summarize_by_time()` aggregates time series data from lower frequency (time periods) to higher frequency.\n\n**Load Libraries & Data**\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\n# import libraries\nimport pytimetk as tk\nimport pandas as pd\nimport numpy as np\n\n# import data\nm4_daily_df = tk.load_dataset('m4_daily', parse_dates = ['date'])\n\nprint(m4_daily_df.head())\nprint('\\nLength of the full dataset:', len(m4_daily_df))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n    id       date   value\n0  D10 2014-07-03  2076.2\n1  D10 2014-07-04  2073.4\n2  D10 2014-07-05  2048.7\n3  D10 2014-07-06  2048.9\n4  D10 2014-07-07  2006.4\n\nLength of the full dataset: 9743\n```\n:::\n:::\n\n\n::: {.callout-tip collapse=\"false\"}\n## Help Doc Info: `summarize_by_time`\n\nUse `help(tk.summarize_by_time)` to review additional helpful documentation.\n\n:::\n\n## Basic Example\n\nThe `m4_daily` dataset has a **daily** frequency. Say we are interested in forecasting at the **weekly** level. We can use `summarize_by_time()` to aggregate to a weekly level\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\n# summarize by time: daily to weekly\nsummarized_df = m4_daily_df \\\n\t.summarize_by_time(\n\t\tdate_column  = 'date',\n\t\tvalue_column = 'value',\n\t\tfreq         = 'W',\n\t\tagg_func     = 'sum'\n\t)\n\nprint(summarized_df.head())\nprint('\\nLength of the full dataset:', len(summarized_df))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n        date     value\n0 1978-06-25  27328.12\n1 1978-07-02  63621.88\n2 1978-07-09  63334.38\n3 1978-07-16  63737.51\n4 1978-07-23  64718.76\n\nLength of the full dataset: 1977\n```\n:::\n:::\n\n\nThe data has now been aggregated at the weekly level. Notice we now have 1977 rows, compared to full dataset which had 9743 rows.\n\n\n## Additional Aggregate Functions\n`summarize_by_time()` can take additional aggregate functions in the `agg_func` argument.\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\n# summarize by time with additional aggregate functions\nsummarized_multiple_agg_df = m4_daily_df \\\n\t.summarize_by_time(\n\t\tdate_column  = 'date',\n\t\tvalue_column = 'value',\n\t\tfreq         = 'W',\n\t\tagg_func     = ['sum', 'min', 'max']\n\t)\n\nsummarized_multiple_agg_df.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=3}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>date</th>\n      <th>value_sum</th>\n      <th>value_min</th>\n      <th>value_max</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1978-06-25</td>\n      <td>27328.12</td>\n      <td>9103.12</td>\n      <td>9115.62</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1978-07-02</td>\n      <td>63621.88</td>\n      <td>9046.88</td>\n      <td>9115.62</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1978-07-09</td>\n      <td>63334.38</td>\n      <td>9028.12</td>\n      <td>9096.88</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1978-07-16</td>\n      <td>63737.51</td>\n      <td>9075.00</td>\n      <td>9146.88</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>1978-07-23</td>\n      <td>64718.76</td>\n      <td>9171.88</td>\n      <td>9315.62</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n## Summarize by Time with Grouped Time Series\n`summarize_by_time()` also works with groups.\n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\n# summarize by time with groups and additional aggregate functions\ngrouped_summarized_df = (\n    m4_daily_df\n        .groupby('id')\n        .summarize_by_time(\n            date_column  = 'date',\n            value_column = 'value',\n            freq         = 'W',\n            agg_func     = [\n                'sum',\n                'min',\n                ('q25', lambda x: np.quantile(x, 0.25)),\n\t\t\t\t'median',\n                ('q75', lambda x: np.quantile(x, 0.75)),\n                'max'\n            ],\n        )\n)\n\ngrouped_summarized_df.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=4}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>id</th>\n      <th>date</th>\n      <th>value_sum</th>\n      <th>value_min</th>\n      <th>value_q25</th>\n      <th>value_median</th>\n      <th>value_q75</th>\n      <th>value_max</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>D10</td>\n      <td>2014-07-06</td>\n      <td>8247.2</td>\n      <td>2048.7</td>\n      <td>2048.85</td>\n      <td>2061.15</td>\n      <td>2074.10</td>\n      <td>2076.2</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>D10</td>\n      <td>2014-07-13</td>\n      <td>14040.8</td>\n      <td>1978.8</td>\n      <td>2003.95</td>\n      <td>2007.40</td>\n      <td>2013.80</td>\n      <td>2019.1</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>D10</td>\n      <td>2014-07-20</td>\n      <td>13867.6</td>\n      <td>1943.0</td>\n      <td>1955.30</td>\n      <td>1988.30</td>\n      <td>2005.60</td>\n      <td>2014.5</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>D10</td>\n      <td>2014-07-27</td>\n      <td>13266.3</td>\n      <td>1876.0</td>\n      <td>1887.15</td>\n      <td>1891.00</td>\n      <td>1895.85</td>\n      <td>1933.3</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>D10</td>\n      <td>2014-08-03</td>\n      <td>13471.2</td>\n      <td>1886.2</td>\n      <td>1914.60</td>\n      <td>1920.00</td>\n      <td>1939.55</td>\n      <td>1956.7</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n# Future Frame\n\n`future_frame()` can be used to extend timeseries data beyond the existing index (date). This is necessary when trying to make future predictions.\n\n::: {.callout-tip collapse=\"false\"}\n## Help Doc Info: `future_frame()`\n\nUse `help(tk.future_frame)` to review additional helpful documentation.\n\n:::\n\n\n## Basic Example\nWe'll continue with our use of the `m4_daily_df` dataset. Recall we've alread aggregated at the **weekly** level (`summarized_df`). Lets checkout the last week in the `summarized_df`:\n\n::: {.cell execution_count=5}\n``` {.python .cell-code}\n# last week in dataset\nsummarized_df \\\n    .sort_values(by = 'date', ascending = True) \\\n    .iloc[: -1] \\\n    .tail(1)\n```\n\n::: {.cell-output .cell-output-display execution_count=5}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>date</th>\n      <th>value</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>1975</th>\n      <td>2016-05-01</td>\n      <td>17959.8</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {.callout-note collapse=\"false\"}\n## `iloc()`\n\n`iloc[: -1]` is used to filter out the last row and keep only dates that are the start of the week.\n\n:::\n\nWe can see that the last week is the week of 2016-05-01. Now say we wanted to forecast the next 8 weeks. We can extend the dataset beyound the week of 2016-05-01:\n\n::: {.cell execution_count=6}\n``` {.python .cell-code}\n# extend dataset by 12 weeks\nsummarized_extended_df = summarized_df \\\n\t.future_frame(\n\t\tdate_column = 'date',\n\t\tlength_out  = 8\n\t)\n\nsummarized_extended_df\n```\n\n::: {.cell-output .cell-output-display execution_count=6}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>date</th>\n      <th>value</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1978-06-25</td>\n      <td>27328.12</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1978-07-02</td>\n      <td>63621.88</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1978-07-09</td>\n      <td>63334.38</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1978-07-16</td>\n      <td>63737.51</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>1978-07-23</td>\n      <td>64718.76</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>1980</th>\n      <td>2016-06-05</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>1981</th>\n      <td>2016-06-12</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>1982</th>\n      <td>2016-06-19</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>1983</th>\n      <td>2016-06-26</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>1984</th>\n      <td>2016-07-03</td>\n      <td>NaN</td>\n    </tr>\n  </tbody>\n</table>\n<p>1985 rows × 2 columns</p>\n</div>\n```\n:::\n:::\n\n\nTo get only the future data, we can filter the dataset for where `value` is missing (`np.nan`).\n\n::: {.cell execution_count=7}\n``` {.python .cell-code}\n# get only future data\nsummarized_extended_df \\\n\t.query('value.isna()')\n```\n\n::: {.cell-output .cell-output-display execution_count=7}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>date</th>\n      <th>value</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>1977</th>\n      <td>2016-05-15</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>1978</th>\n      <td>2016-05-22</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>1979</th>\n      <td>2016-05-29</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>1980</th>\n      <td>2016-06-05</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>1981</th>\n      <td>2016-06-12</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>1982</th>\n      <td>2016-06-19</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>1983</th>\n      <td>2016-06-26</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>1984</th>\n      <td>2016-07-03</td>\n      <td>NaN</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n## Future Frame with Grouped Time Series\n`future_frame()` also works for grouped time series. We can see an example using our grouped summarized dataset (`grouped_summarized_df`) from earlier:\n\n::: {.cell execution_count=8}\n``` {.python .cell-code}\n# future frame with grouped time series\ngrouped_summarized_df[['id', 'date', 'value_sum']] \\\n\t.groupby('id') \\\n\t.future_frame(\n\t\tdate_column = 'date',\n\t\tlength_out  = 8\n\t) \\\n\t.query('value_sum.isna()') # filtering to return only the future data\n```\n\n::: {.cell-output .cell-output-display}\n```{=html}\n<script type=\"application/vnd.jupyter.widget-view+json\">\n{\"model_id\":\"4a89b165472b400684b96688f96942eb\",\"version_major\":2,\"version_minor\":0,\"quarto_mimetype\":\"application/vnd.jupyter.widget-view+json\"}\n</script>\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=8}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>id</th>\n      <th>date</th>\n      <th>value_sum</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>1395</th>\n      <td>D10</td>\n      <td>2016-05-15</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>1396</th>\n      <td>D10</td>\n      <td>2016-05-22</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>1397</th>\n      <td>D10</td>\n      <td>2016-05-29</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>1398</th>\n      <td>D10</td>\n      <td>2016-06-05</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>1399</th>\n      <td>D10</td>\n      <td>2016-06-12</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>1400</th>\n      <td>D10</td>\n      <td>2016-06-19</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>1401</th>\n      <td>D10</td>\n      <td>2016-06-26</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>1402</th>\n      <td>D10</td>\n      <td>2016-07-03</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>1403</th>\n      <td>D160</td>\n      <td>2011-07-10</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>1404</th>\n      <td>D160</td>\n      <td>2011-07-17</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>1405</th>\n      <td>D160</td>\n      <td>2011-07-24</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>1406</th>\n      <td>D160</td>\n      <td>2011-07-31</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>1407</th>\n      <td>D160</td>\n      <td>2011-08-07</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>1408</th>\n      <td>D160</td>\n      <td>2011-08-14</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>1409</th>\n      <td>D160</td>\n      <td>2011-08-21</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>1410</th>\n      <td>D160</td>\n      <td>2011-08-28</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>1411</th>\n      <td>D410</td>\n      <td>1980-05-11</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>1412</th>\n      <td>D410</td>\n      <td>1980-05-18</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>1413</th>\n      <td>D410</td>\n      <td>1980-05-25</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>1414</th>\n      <td>D410</td>\n      <td>1980-06-01</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>1415</th>\n      <td>D410</td>\n      <td>1980-06-08</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>1416</th>\n      <td>D410</td>\n      <td>1980-06-15</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>1417</th>\n      <td>D410</td>\n      <td>1980-06-22</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>1418</th>\n      <td>D410</td>\n      <td>1980-06-29</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>1419</th>\n      <td>D500</td>\n      <td>2012-09-30</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>1420</th>\n      <td>D500</td>\n      <td>2012-10-07</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>1421</th>\n      <td>D500</td>\n      <td>2012-10-14</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>1422</th>\n      <td>D500</td>\n      <td>2012-10-21</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>1423</th>\n      <td>D500</td>\n      <td>2012-10-28</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>1424</th>\n      <td>D500</td>\n      <td>2012-11-04</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>1425</th>\n      <td>D500</td>\n      <td>2012-11-11</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>1426</th>\n      <td>D500</td>\n      <td>2012-11-18</td>\n      <td>NaN</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n# Pad by Time\n\n`pad_by_time()` can be used to add rows where timestamps are missing. For example, when working with sales data that may have missing values on weekends or holidays.\n\n::: {.callout-tip collapse=\"false\"}\n## Help Doc Info: `pad_by_time()`\n\nUse `help(tk.pad_by_time)` to review additional helpful documentation.\n\n:::\n\n## Basic Example\nLet's start with a basic example to see how `pad_by_time()` works. We'll create some sample data with missing timestamps:\n\n::: {.cell execution_count=9}\n``` {.python .cell-code}\n# libraries\nimport pytimetk as tk\nimport pandas as pd\nimport numpy as np\n\n# sample quarterly data with missing timestamp for Q3\ndates = pd.to_datetime([\"2021-01-01\", \"2021-04-01\", \"2021-10-01\"])\nvalue = range(len(dates))\n\ndf = pd.DataFrame({\n    'date': dates,\n    'value': range(len(dates))\n})\n\ndf\n```\n\n::: {.cell-output .cell-output-display execution_count=9}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>date</th>\n      <th>value</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>2021-01-01</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2021-04-01</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2021-10-01</td>\n      <td>2</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nNow we can use `pad_by_time()` to fill in the missing timestamp:\n\n::: {.cell execution_count=10}\n``` {.python .cell-code}\n# pad by time\ndf \\\n\t.pad_by_time(\n\t\tdate_column = 'date',\n\t\tfreq        = 'QS' # specifying quarter start frequency\n\t)\n```\n\n::: {.cell-output .cell-output-display execution_count=10}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>date</th>\n      <th>value</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>2021-01-01</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2021-04-01</td>\n      <td>1.0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2021-07-01</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>2021-10-01</td>\n      <td>2.0</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nWe can also specify shorter time frequency:\n\n::: {.cell execution_count=11}\n``` {.python .cell-code}\n# pad by time with shorter frequency\ndf \\\n\t.pad_by_time(\n\t\tdate_column = 'date',\n\t\tfreq        = 'MS' # specifying month start frequency\n\t) \\\n\t.assign(value = lambda x: x['value'].fillna(0)) # replace NaN with 0\n```\n\n::: {.cell-output .cell-output-display execution_count=11}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>date</th>\n      <th>value</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>2021-01-01</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2021-02-01</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2021-03-01</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>2021-04-01</td>\n      <td>1.0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>2021-05-01</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>2021-06-01</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>2021-07-01</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>2021-08-01</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>2021-09-01</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>2021-10-01</td>\n      <td>2.0</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n## Pad by Time with Grouped Time Series\n`pad_by_time()` can also be used with grouped time series. Let's use the `stocks_daily` dataset to showcase an example:\n\n::: {.cell execution_count=12}\n``` {.python .cell-code}\n# load dataset\nstocks_df = tk.load_dataset('stocks_daily', parse_dates = ['date'])\n\n# pad by time\nstocks_df \\\n\t.groupby('symbol') \\\n\t.pad_by_time(\n\t\tdate_column = 'date',\n\t\tfreq        = 'D'\n\t) \\\n\t.assign(id = lambda x: x['symbol'].ffill())\n```\n\n::: {.cell-output .cell-output-display execution_count=12}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>symbol</th>\n      <th>date</th>\n      <th>open</th>\n      <th>high</th>\n      <th>low</th>\n      <th>close</th>\n      <th>volume</th>\n      <th>adjusted</th>\n      <th>id</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>AAPL</td>\n      <td>2013-01-02</td>\n      <td>19.779285</td>\n      <td>19.821428</td>\n      <td>19.343929</td>\n      <td>19.608213</td>\n      <td>560518000.0</td>\n      <td>16.791180</td>\n      <td>AAPL</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>AAPL</td>\n      <td>2013-01-03</td>\n      <td>19.567142</td>\n      <td>19.631071</td>\n      <td>19.321428</td>\n      <td>19.360714</td>\n      <td>352965200.0</td>\n      <td>16.579241</td>\n      <td>AAPL</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>AAPL</td>\n      <td>2013-01-04</td>\n      <td>19.177500</td>\n      <td>19.236786</td>\n      <td>18.779642</td>\n      <td>18.821428</td>\n      <td>594333600.0</td>\n      <td>16.117437</td>\n      <td>AAPL</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>AAPL</td>\n      <td>2013-01-05</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>AAPL</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>AAPL</td>\n      <td>2013-01-06</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>AAPL</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>23485</th>\n      <td>NVDA</td>\n      <td>2023-09-17</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NVDA</td>\n    </tr>\n    <tr>\n      <th>23486</th>\n      <td>NVDA</td>\n      <td>2023-09-18</td>\n      <td>427.480011</td>\n      <td>442.420013</td>\n      <td>420.000000</td>\n      <td>439.660004</td>\n      <td>50027100.0</td>\n      <td>439.660004</td>\n      <td>NVDA</td>\n    </tr>\n    <tr>\n      <th>23487</th>\n      <td>NVDA</td>\n      <td>2023-09-19</td>\n      <td>438.329987</td>\n      <td>439.660004</td>\n      <td>430.019989</td>\n      <td>435.200012</td>\n      <td>37306400.0</td>\n      <td>435.200012</td>\n      <td>NVDA</td>\n    </tr>\n    <tr>\n      <th>23488</th>\n      <td>NVDA</td>\n      <td>2023-09-20</td>\n      <td>436.000000</td>\n      <td>439.029999</td>\n      <td>422.230011</td>\n      <td>422.390015</td>\n      <td>36710800.0</td>\n      <td>422.390015</td>\n      <td>NVDA</td>\n    </tr>\n    <tr>\n      <th>23489</th>\n      <td>NVDA</td>\n      <td>2023-09-21</td>\n      <td>415.829987</td>\n      <td>421.000000</td>\n      <td>409.799988</td>\n      <td>410.170013</td>\n      <td>44893000.0</td>\n      <td>410.170013</td>\n      <td>NVDA</td>\n    </tr>\n  </tbody>\n</table>\n<p>23490 rows × 9 columns</p>\n</div>\n```\n:::\n:::\n\n\nTo replace NaN with 0 in a dataframe with multiple columns:\n\n::: {.cell execution_count=13}\n``` {.python .cell-code}\nfrom functools import partial\n\n# columns to replace NaN with 0\ncols_to_fill = ['open', 'high', 'low', 'close', 'volume', 'adjusted']\n\n# define a function to fillna\ndef fill_na_col(df, col):\n    return df[col].fillna(0)\n\n# pad by time and replace NaN with 0\nstocks_df \\\n\t.groupby('symbol') \\\n\t.pad_by_time(\n\t\tdate_column = 'date',\n\t\tfreq        = 'D'\n\t) \\\n\t.assign(id = lambda x: x['symbol'].ffill()) \\\n\t.assign(**{col: partial(fill_na_col, col=col) for col in cols_to_fill})\n```\n\n::: {.cell-output .cell-output-display execution_count=13}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>symbol</th>\n      <th>date</th>\n      <th>open</th>\n      <th>high</th>\n      <th>low</th>\n      <th>close</th>\n      <th>volume</th>\n      <th>adjusted</th>\n      <th>id</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>AAPL</td>\n      <td>2013-01-02</td>\n      <td>19.779285</td>\n      <td>19.821428</td>\n      <td>19.343929</td>\n      <td>19.608213</td>\n      <td>560518000.0</td>\n      <td>16.791180</td>\n      <td>AAPL</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>AAPL</td>\n      <td>2013-01-03</td>\n      <td>19.567142</td>\n      <td>19.631071</td>\n      <td>19.321428</td>\n      <td>19.360714</td>\n      <td>352965200.0</td>\n      <td>16.579241</td>\n      <td>AAPL</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>AAPL</td>\n      <td>2013-01-04</td>\n      <td>19.177500</td>\n      <td>19.236786</td>\n      <td>18.779642</td>\n      <td>18.821428</td>\n      <td>594333600.0</td>\n      <td>16.117437</td>\n      <td>AAPL</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>AAPL</td>\n      <td>2013-01-05</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.0</td>\n      <td>0.000000</td>\n      <td>AAPL</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>AAPL</td>\n      <td>2013-01-06</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.0</td>\n      <td>0.000000</td>\n      <td>AAPL</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>23485</th>\n      <td>NVDA</td>\n      <td>2023-09-17</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.0</td>\n      <td>0.000000</td>\n      <td>NVDA</td>\n    </tr>\n    <tr>\n      <th>23486</th>\n      <td>NVDA</td>\n      <td>2023-09-18</td>\n      <td>427.480011</td>\n      <td>442.420013</td>\n      <td>420.000000</td>\n      <td>439.660004</td>\n      <td>50027100.0</td>\n      <td>439.660004</td>\n      <td>NVDA</td>\n    </tr>\n    <tr>\n      <th>23487</th>\n      <td>NVDA</td>\n      <td>2023-09-19</td>\n      <td>438.329987</td>\n      <td>439.660004</td>\n      <td>430.019989</td>\n      <td>435.200012</td>\n      <td>37306400.0</td>\n      <td>435.200012</td>\n      <td>NVDA</td>\n    </tr>\n    <tr>\n      <th>23488</th>\n      <td>NVDA</td>\n      <td>2023-09-20</td>\n      <td>436.000000</td>\n      <td>439.029999</td>\n      <td>422.230011</td>\n      <td>422.390015</td>\n      <td>36710800.0</td>\n      <td>422.390015</td>\n      <td>NVDA</td>\n    </tr>\n    <tr>\n      <th>23489</th>\n      <td>NVDA</td>\n      <td>2023-09-21</td>\n      <td>415.829987</td>\n      <td>421.000000</td>\n      <td>409.799988</td>\n      <td>410.170013</td>\n      <td>44893000.0</td>\n      <td>410.170013</td>\n      <td>NVDA</td>\n    </tr>\n  </tbody>\n</table>\n<p>23490 rows × 9 columns</p>\n</div>\n```\n:::\n:::\n\n\n# Next Steps\n\nCheck out the [Adding Features (Augmenting) Time Series Data Guide next.](/guides/05_augmenting.html)\n\n# More Coming Soon...\n\nWe are in the early stages of development. But it's obvious the potential for `pytimetk` now in Python. 🐍\n\n- Please [⭐ us on GitHub](https://github.com/business-science/pytimetk) (it takes 2-seconds and means a lot). \n- To make requests, please see our [Project Roadmap GH Issue #2](https://github.com/business-science/pytimetk/issues/2). You can make requests there. \n- Want to contribute? [See our contributing guide here.](/contributing.html) \n\n",
    "supporting": [
      "04_wrangling_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n<script src=\"https://unpkg.com/@jupyter-widgets/html-manager@*/dist/embed-amd.js\" crossorigin=\"anonymous\"></script>\n"
      ],
      "include-after-body": [
        "<script type=application/vnd.jupyter.widget-state+json>\n{\"state\":{\"0201a4f749774eef915c5f45bd8ee749\":{\"model_module\":\"@jupyter-widgets/controls\",\"model_module_version\":\"2.0.0\",\"model_name\":\"FloatProgressModel\",\"state\":{\"_dom_classes\":[],\"_model_module\":\"@jupyter-widgets/controls\",\"_model_module_version\":\"2.0.0\",\"_model_name\":\"FloatProgressModel\",\"_view_count\":null,\"_view_module\":\"@jupyter-widgets/controls\",\"_view_module_version\":\"2.0.0\",\"_view_name\":\"ProgressView\",\"bar_style\":\"success\",\"description\":\"\",\"description_allow_html\":false,\"layout\":\"IPY_MODEL_babdc9956fd648a096c81e43351d23f1\",\"max\":4,\"min\":0,\"orientation\":\"horizontal\",\"style\":\"IPY_MODEL_3029d6ad6e664ca4b43f044708aca7ed\",\"tabbable\":null,\"tooltip\":null,\"value\":4}},\"15fdc195402847e887803aa3b5dbb191\":{\"model_module\":\"@jupyter-widgets/controls\",\"model_module_version\":\"2.0.0\",\"model_name\":\"HTMLModel\",\"state\":{\"_dom_classes\":[],\"_model_module\":\"@jupyter-widgets/controls\",\"_model_module_version\":\"2.0.0\",\"_model_name\":\"HTMLModel\",\"_view_count\":null,\"_view_module\":\"@jupyter-widgets/controls\",\"_view_module_version\":\"2.0.0\",\"_view_name\":\"HTMLView\",\"description\":\"\",\"description_allow_html\":false,\"layout\":\"IPY_MODEL_ea0748c90a9d4719a38fb88289d8cdc4\",\"placeholder\":\"​\",\"style\":\"IPY_MODEL_e9ae43ba6a3b452dae1efd24617797df\",\"tabbable\":null,\"tooltip\":null,\"value\":\" 4/4 [00:00&lt;00:00, 252.84it/s]\"}},\"27d2c7ff3dc547e798ab288778e4a1b6\":{\"model_module\":\"@jupyter-widgets/controls\",\"model_module_version\":\"2.0.0\",\"model_name\":\"HTMLModel\",\"state\":{\"_dom_classes\":[],\"_model_module\":\"@jupyter-widgets/controls\",\"_model_module_version\":\"2.0.0\",\"_model_name\":\"HTMLModel\",\"_view_count\":null,\"_view_module\":\"@jupyter-widgets/controls\",\"_view_module_version\":\"2.0.0\",\"_view_name\":\"HTMLView\",\"description\":\"\",\"description_allow_html\":false,\"layout\":\"IPY_MODEL_a23f461bd8a3412b830d4d8b5d8437f3\",\"placeholder\":\"​\",\"style\":\"IPY_MODEL_dcf9b2c876764b42bad304cdffae4c06\",\"tabbable\":null,\"tooltip\":null,\"value\":\"Future framing...: 100%\"}},\"3029d6ad6e664ca4b43f044708aca7ed\":{\"model_module\":\"@jupyter-widgets/controls\",\"model_module_version\":\"2.0.0\",\"model_name\":\"ProgressStyleModel\",\"state\":{\"_model_module\":\"@jupyter-widgets/controls\",\"_model_module_version\":\"2.0.0\",\"_model_name\":\"ProgressStyleModel\",\"_view_count\":null,\"_view_module\":\"@jupyter-widgets/base\",\"_view_module_version\":\"2.0.0\",\"_view_name\":\"StyleView\",\"bar_color\":null,\"description_width\":\"\"}},\"4a89b165472b400684b96688f96942eb\":{\"model_module\":\"@jupyter-widgets/controls\",\"model_module_version\":\"2.0.0\",\"model_name\":\"HBoxModel\",\"state\":{\"_dom_classes\":[],\"_model_module\":\"@jupyter-widgets/controls\",\"_model_module_version\":\"2.0.0\",\"_model_name\":\"HBoxModel\",\"_view_count\":null,\"_view_module\":\"@jupyter-widgets/controls\",\"_view_module_version\":\"2.0.0\",\"_view_name\":\"HBoxView\",\"box_style\":\"\",\"children\":[\"IPY_MODEL_27d2c7ff3dc547e798ab288778e4a1b6\",\"IPY_MODEL_0201a4f749774eef915c5f45bd8ee749\",\"IPY_MODEL_15fdc195402847e887803aa3b5dbb191\"],\"layout\":\"IPY_MODEL_b49ad74b12bb46eba79b2820cd3b4f5c\",\"tabbable\":null,\"tooltip\":null}},\"a23f461bd8a3412b830d4d8b5d8437f3\":{\"model_module\":\"@jupyter-widgets/base\",\"model_module_version\":\"2.0.0\",\"model_name\":\"LayoutModel\",\"state\":{\"_model_module\":\"@jupyter-widgets/base\",\"_model_module_version\":\"2.0.0\",\"_model_name\":\"LayoutModel\",\"_view_count\":null,\"_view_module\":\"@jupyter-widgets/base\",\"_view_module_version\":\"2.0.0\",\"_view_name\":\"LayoutView\",\"align_content\":null,\"align_items\":null,\"align_self\":null,\"border_bottom\":null,\"border_left\":null,\"border_right\":null,\"border_top\":null,\"bottom\":null,\"display\":null,\"flex\":null,\"flex_flow\":null,\"grid_area\":null,\"grid_auto_columns\":null,\"grid_auto_flow\":null,\"grid_auto_rows\":null,\"grid_column\":null,\"grid_gap\":null,\"grid_row\":null,\"grid_template_areas\":null,\"grid_template_columns\":null,\"grid_template_rows\":null,\"height\":null,\"justify_content\":null,\"justify_items\":null,\"left\":null,\"margin\":null,\"max_height\":null,\"max_width\":null,\"min_height\":null,\"min_width\":null,\"object_fit\":null,\"object_position\":null,\"order\":null,\"overflow\":null,\"padding\":null,\"right\":null,\"top\":null,\"visibility\":null,\"width\":null}},\"b49ad74b12bb46eba79b2820cd3b4f5c\":{\"model_module\":\"@jupyter-widgets/base\",\"model_module_version\":\"2.0.0\",\"model_name\":\"LayoutModel\",\"state\":{\"_model_module\":\"@jupyter-widgets/base\",\"_model_module_version\":\"2.0.0\",\"_model_name\":\"LayoutModel\",\"_view_count\":null,\"_view_module\":\"@jupyter-widgets/base\",\"_view_module_version\":\"2.0.0\",\"_view_name\":\"LayoutView\",\"align_content\":null,\"align_items\":null,\"align_self\":null,\"border_bottom\":null,\"border_left\":null,\"border_right\":null,\"border_top\":null,\"bottom\":null,\"display\":null,\"flex\":null,\"flex_flow\":null,\"grid_area\":null,\"grid_auto_columns\":null,\"grid_auto_flow\":null,\"grid_auto_rows\":null,\"grid_column\":null,\"grid_gap\":null,\"grid_row\":null,\"grid_template_areas\":null,\"grid_template_columns\":null,\"grid_template_rows\":null,\"height\":null,\"justify_content\":null,\"justify_items\":null,\"left\":null,\"margin\":null,\"max_height\":null,\"max_width\":null,\"min_height\":null,\"min_width\":null,\"object_fit\":null,\"object_position\":null,\"order\":null,\"overflow\":null,\"padding\":null,\"right\":null,\"top\":null,\"visibility\":null,\"width\":null}},\"babdc9956fd648a096c81e43351d23f1\":{\"model_module\":\"@jupyter-widgets/base\",\"model_module_version\":\"2.0.0\",\"model_name\":\"LayoutModel\",\"state\":{\"_model_module\":\"@jupyter-widgets/base\",\"_model_module_version\":\"2.0.0\",\"_model_name\":\"LayoutModel\",\"_view_count\":null,\"_view_module\":\"@jupyter-widgets/base\",\"_view_module_version\":\"2.0.0\",\"_view_name\":\"LayoutView\",\"align_content\":null,\"align_items\":null,\"align_self\":null,\"border_bottom\":null,\"border_left\":null,\"border_right\":null,\"border_top\":null,\"bottom\":null,\"display\":null,\"flex\":null,\"flex_flow\":null,\"grid_area\":null,\"grid_auto_columns\":null,\"grid_auto_flow\":null,\"grid_auto_rows\":null,\"grid_column\":null,\"grid_gap\":null,\"grid_row\":null,\"grid_template_areas\":null,\"grid_template_columns\":null,\"grid_template_rows\":null,\"height\":null,\"justify_content\":null,\"justify_items\":null,\"left\":null,\"margin\":null,\"max_height\":null,\"max_width\":null,\"min_height\":null,\"min_width\":null,\"object_fit\":null,\"object_position\":null,\"order\":null,\"overflow\":null,\"padding\":null,\"right\":null,\"top\":null,\"visibility\":null,\"width\":null}},\"dcf9b2c876764b42bad304cdffae4c06\":{\"model_module\":\"@jupyter-widgets/controls\",\"model_module_version\":\"2.0.0\",\"model_name\":\"HTMLStyleModel\",\"state\":{\"_model_module\":\"@jupyter-widgets/controls\",\"_model_module_version\":\"2.0.0\",\"_model_name\":\"HTMLStyleModel\",\"_view_count\":null,\"_view_module\":\"@jupyter-widgets/base\",\"_view_module_version\":\"2.0.0\",\"_view_name\":\"StyleView\",\"background\":null,\"description_width\":\"\",\"font_size\":null,\"text_color\":null}},\"e9ae43ba6a3b452dae1efd24617797df\":{\"model_module\":\"@jupyter-widgets/controls\",\"model_module_version\":\"2.0.0\",\"model_name\":\"HTMLStyleModel\",\"state\":{\"_model_module\":\"@jupyter-widgets/controls\",\"_model_module_version\":\"2.0.0\",\"_model_name\":\"HTMLStyleModel\",\"_view_count\":null,\"_view_module\":\"@jupyter-widgets/base\",\"_view_module_version\":\"2.0.0\",\"_view_name\":\"StyleView\",\"background\":null,\"description_width\":\"\",\"font_size\":null,\"text_color\":null}},\"ea0748c90a9d4719a38fb88289d8cdc4\":{\"model_module\":\"@jupyter-widgets/base\",\"model_module_version\":\"2.0.0\",\"model_name\":\"LayoutModel\",\"state\":{\"_model_module\":\"@jupyter-widgets/base\",\"_model_module_version\":\"2.0.0\",\"_model_name\":\"LayoutModel\",\"_view_count\":null,\"_view_module\":\"@jupyter-widgets/base\",\"_view_module_version\":\"2.0.0\",\"_view_name\":\"LayoutView\",\"align_content\":null,\"align_items\":null,\"align_self\":null,\"border_bottom\":null,\"border_left\":null,\"border_right\":null,\"border_top\":null,\"bottom\":null,\"display\":null,\"flex\":null,\"flex_flow\":null,\"grid_area\":null,\"grid_auto_columns\":null,\"grid_auto_flow\":null,\"grid_auto_rows\":null,\"grid_column\":null,\"grid_gap\":null,\"grid_row\":null,\"grid_template_areas\":null,\"grid_template_columns\":null,\"grid_template_rows\":null,\"height\":null,\"justify_content\":null,\"justify_items\":null,\"left\":null,\"margin\":null,\"max_height\":null,\"max_width\":null,\"min_height\":null,\"min_width\":null,\"object_fit\":null,\"object_position\":null,\"order\":null,\"overflow\":null,\"padding\":null,\"right\":null,\"top\":null,\"visibility\":null,\"width\":null}}},\"version_major\":2,\"version_minor\":0}\n</script>\n"
      ]
    }
  }
}